{"version":3,"sources":["../../source/api/companies.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAqB,UAAU;;yBACR,aAAa;;;;oBACnB,QAAQ;;;;AAElB,IAAM,SAAS,GAAG,SACrB,MAAM,CAAC,MAAM,mBAAM,EACnB;AACI,YAAQ,EAAE,YAAY;;;;;;;;AAQtB,YAAQ,EAAE,kBAAU,EAAE,EAAE;AACpB,YAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,UAAO,EAAE,eAAW,CAAC;;AAEpD,eAAO,uBAAW,IAAI,CAAC,WAAW,CAAC,CAAC;KACvC;CACJ,CACJ,CAAC;;;;AAEK,SAAS,OAAO,CAAE,EAAE,EAAE;AACzB,WAAO;AACH,cAAM,EAAE,SAAc,MAAM,CAAC,MAAM,gBAAQ,EAAE;AACzC,oBAAQ,EAAE,SAAS,CAAC,QAAQ,UAAO,EAAE,CAAE,GAAG,eAAO,QAAQ;SAC5D,CAAC;;AAEF,gBAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;KACnD,CAAC;CACL","file":"companies.js","sourcesContent":["import {people} from './people';\nimport requestFns from './functions';\nimport crud from './crud';\n\nexport const companies = Object.assign(\n    Object.create(crud),\n    {\n        basePath: '/companies',\n\n        /**\n         * Fetch projects for a specific company\n         *\n         * @param  {Integer} id Company ID to fetch projects for\n         * @return {Promise}    Bluebird promise, see TW API docs for success JSON\n         */\n        projects: function (id) {\n            let requestPath = this.basePath + `/${id}/projects`;\n\n            return requestFns.find(requestPath);\n        }\n    }\n);\n\nexport function company (id) {\n    return {\n        people: Object.assign(Object.create(people), {\n            basePath: companies.basePath + `/${id}` + people.basePath\n        }),\n\n        projects: companies.projects.bind(companies, id)\n    };\n}\n"]}