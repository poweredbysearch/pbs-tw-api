{"version":3,"sources":["../../source/api/projects.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;yBACC,aAAa;;;;oBACnB,QAAQ;;;;2BACC,eAAe;;yBACjB,aAAa;;qBACjB,SAAS;;AAEtB,IAAM,QAAQ,GAAG,SACpB,MAAM,CAAC,MAAM,mBAAM,EACnB;AACI,YAAQ,EAAE,WAAW;;;;;AAKrB,WAAO,EAAC,mBAAG;AACP,eAAO,uBAAW,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACzC;;;;;;;;AAQD,UAAM,EAAC,gBAAC,EAAE,EAAE;AACR,YAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,UAAO,EAAE,aAAS,CAAC;;AAElD,eAAO;AACH,eAAG,EAAC,aAAC,QAAQ,EAAE;AACX,uBAAO,uBAAW,MAAM,CAAC,WAAW,UAAO,QAAQ,CAAE,CAAC,CAAC;aAC1D;SACJ,CAAC;KACL;;;;;;;;AAQD,QAAI,EAAC,cAAC,EAAE,EAAE;AACN,YAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,UAAO,EAAE,WAAO,CAAC;;AAEhD,eAAO,uBAAW,MAAM,CAAC,WAAW,CAAC,CAAC;KACzC;;;;;;;;AAQD,UAAM,EAAC,gBAAC,EAAE,EAAE;AACR,YAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,UAAO,EAAE,aAAS,CAAC;;AAElD,eAAO,uBAAW,MAAM,CAAC,WAAW,CAAC,CAAC;KACzC;CACJ,CACJ,CAAC;;;;AAEK,SAAS,OAAO,CAAE,EAAE,EAAE;;AAEzB,WAAO;;AAEH,mBAAW,EAAE,SAAc,MAAM,CAAC,MAAM,0BAAa,EAAE;AACnD,oBAAQ,EAAE,QAAQ,CAAC,QAAQ,UAAO,EAAE,CAAE,GAAG,yBAAY,QAAQ;SAChE,CAAC;;AAEF,iBAAS,EAAE,SAAc,oBAAE,IAAI,CAAC,MAAM,CAAC,MAAM,sBAAW,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,EAAE;AAC7E,oBAAQ,EAAE,QAAQ,CAAC,QAAQ,UAAO,EAAE,CAAE,GAAG,qBAAU,QAAQ;;AAE3D,mBAAO,EAAC,iBAAC,IAAI,EAAE;AACX,uBAAO,uBAAW,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAU,EAAE,IAAI,CAAC,CAAC;aAC9D;SACJ,CAAC;;AAEF,aAAK,EAAE,SAAc,oBAAE,IAAI,CAAC,MAAM,CAAC,MAAM,cAAO,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE;AAC3D,oBAAQ,EAAE,QAAQ,CAAC,QAAQ,UAAO,EAAE,CAAE,GAAG,aAAM,QAAQ;SACxD,CAAC;;AAEF,cAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;;;;;;;AAO1C,YAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;;;;;;;AAOtC,cAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;;KAE7C,CAAC;CACL","file":"projects.js","sourcesContent":["import _ from 'lodash';\nimport requestFns from './functions';\nimport crud from './crud';\nimport {timeEntries} from './timeEntries';\nimport {taskLists} from './taskLists';\nimport {tasks} from './tasks';\n\nexport const projects = Object.assign(\n    Object.create(crud),\n    {\n        basePath: '/projects',\n\n        /**\n         * Get the authenticated user's starred projects\n         */\n        starred () {\n            return requestFns.find(this.basePath);\n        },\n\n        /**\n         * Add/remove people on the project\n         *\n         * @param  {Integer} id Project ID to fetch projects for\n         * @return {Promise}    Bluebird promise, see TW API docs for success JSON\n         */\n        people (id) {\n            let requestPath = this.basePath + `/${id}/people`;\n\n            return {\n                add (personId) {\n                    return requestFns.create(requestPath + `/${personId}`);\n                }\n            };\n        },\n\n        /**\n         * Star\n         *\n         * @param  {Integer} id Project ID to star\n         * @return {Promise}    Bluebird promise, see TW API docs for success JSON\n         */\n        star (id) {\n            let requestPath = this.basePath + `/${id}/star`;\n\n            return requestFns.update(requestPath);\n        },\n\n        /**\n         * Un-Star\n         *\n         * @param  {Integer} id Project ID to Un-star\n         * @return {Promise}    Bluebird promise, see TW API docs for success JSON\n         */\n        unstar (id) {\n            let requestPath = this.basePath + `/${id}/unstar`;\n\n            return requestFns.update(requestPath);\n        }\n    }\n);\n\nexport function project (id) {\n\n    return {\n\n        timeEntries: Object.assign(Object.create(timeEntries), {\n            basePath: projects.basePath + `/${id}` + timeEntries.basePath\n        }),\n\n        taskLists: Object.assign(_.omit(Object.create(taskLists), ['update', 'delete']), {\n            basePath: projects.basePath + `/${id}` + taskLists.basePath,\n\n            reorder (data) {\n                return requestFns.update(this.basepath + '/reorder', data);\n            }\n        }),\n\n        tasks: Object.assign(_.pick(Object.create(tasks), ['find']), {\n          basePath: projects.basePath + `/${id}` + tasks.basePath\n        }),\n\n        people: projects.people.call(projects, id),\n\n        /**\n         * Star a project\n         *\n         * @return {Promise}\n         */\n        star: projects.star.bind(projects, id),\n\n        /**\n         * Unstar a project\n         *\n         * @return {Promise}\n         */\n        unstar: projects.unstar.bind(projects, id)\n\n    };\n}\n"]}