{"version":3,"sources":["../../source/api/crud.js"],"names":[],"mappings":";;;;;;;;yBAAuB,aAAa;;;;AAEpC,IAAM,IAAI,GAAG;;;;;;;;AAQT,QAAI,EAAE,cAAU,MAAM,EAAE;AACpB,YAAI,MAAM,KAAK,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACjC,mBAAO,uBAAW,IAAI,CAAC,IAAI,CAAC,QAAQ,UAAO,MAAM,CAAE,CAAC,CAAC;SACxD;;AAED,eAAO,uBAAW,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;KACjD;;AAED,UAAM,EAAE,gBAAU,IAAI,EAAE;AACpB,eAAO,uBAAW,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KACjD;;AAED,UAAM,EAAE,gBAAU,EAAE,EAAE,IAAI,EAAE;AACxB,eAAO,uBAAW,MAAM,CAAC,IAAI,CAAC,QAAQ,UAAO,EAAE,CAAE,EAAE,IAAI,CAAC,CAAC;KAC5D;;AAED,WAAO,EAAE,iBAAU,EAAE,EAAE;AACnB,eAAO,uBAAW,OAAO,CAAC,IAAI,CAAC,QAAQ,UAAO,EAAE,CAAE,CAAC,CAAC;KACvD;;CAEJ,CAAC;;qBAEa,IAAI","file":"crud.js","sourcesContent":["import requestFns from './functions';\n\nconst crud = {\n\n    /**\n     * Find (get request)\n     *\n     * @param  {Object/Int} params Will look for a single record if int is passed\n     * @return {Promise}           bluebird promise\n     */\n    find: function (params) {\n        if (params === parseInt(params, 10)) {\n            return requestFns.find(this.basePath + `/${params}`);\n        }\n\n        return requestFns.find(this.basePath, params);\n    },\n\n    create: function (data) {\n        return requestFns.create(this.basePath, data);\n    },\n\n    update: function (id, data) {\n        return requestFns.update(this.basePath + `/${id}`, data);\n    },\n\n    destroy: function (id) {\n        return requestFns.destroy(this.basePath + `/${id}`);\n    }\n\n};\n\nexport default crud;\n"]}