{"version":3,"sources":["../source/apiRequest.js"],"names":[],"mappings":";;;;;;;;;;;;;sBAAc,QAAQ;;;;wBACF,UAAU;;;;uBACV,SAAS;;;;wBACR,YAAY;;;;AAEjC,IAAM,eAAe,2BAAG;;AAuBpB,QAAI,EAAC,gBAAG;AACJ,eAAO,0BAAY,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACjD;;AAED,aAAS,EAAC,mBAAC,OAAO,EAAE,MAAM,EAAE;AACxB,YAAI,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC;;;AAGhC,qBAAa,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,GAAG,OAAO,CAAC;;AAEhD,kCAAQ,aAAa,EAAE,UAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAK;AAC9C,gBAAI,MAAM,GAAG,SAAS,CAAC;;AAEvB,gBAAI,KAAK,EAAE;AACP,sBAAM,CAAC,KAAK,CAAC,CAAC;aACjB,MAAM,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,IAAI,QAAQ,CAAC,UAAU,GAAG,GAAG,EAAE;AAChE,oBAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC1B,wBAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;iBAC3B;;AAED,oCAAE,OAAO,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,EAAE,UAAS,CAAC,EAAE;;AAEtD,wBAAI,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;AAC5C,4BAAI,OAAO,MAAM,KAAK,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC;;AAE/C,8BAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBAC5C;iBACJ,CAAC,CAAA;;AAEF,uBAAO,CAAC,EAAC,IAAI,EAAJ,IAAI,EAAE,MAAM,EAAN,MAAM,EAAC,CAAC,CAAC;aAC3B,MAAM;AACH,sBAAM,CAAC;AACH,wBAAI,EAAE,QAAQ,CAAC,UAAU;AACzB,2BAAO,EAAE,QAAQ,CAAC,aAAa;iBAClC,CAAC,CAAC;aACN;SACJ,CAAC,CAAC;KACN;CACJ;AA3DO,YAAQ;aAAC,eAAG;AACZ,mBAAO,sBAAS,MAAM,CAAC,MAAM,GAAG,eAAe,CAAC;SACnD;;;;AAEG,WAAO;aAAC,eAAG;AACX,mBAAO,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC;SACrC;;;;AAEG,UAAM;aAAC,eAAG;AACV,mBAAO,SAAc;AACjB,wBAAQ,EAAE,MAAM;AAChB,8BAAc,EAAE,IAAI;AACpB,uBAAO,EAAE;AACL,4BAAQ,EAAE,kBAAkB;AAC5B,mCAAe,EAAE,QAAQ,GAAG,IAAI,MAAM,CAAC,sBAAS,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;iBAC1F;AACD,wBAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,uBAAO,EAAE,IAAI,CAAC,OAAO;aACxB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SACjB;;;;EAwCJ,CAAC;;qBAEa,eAAe;;;;;;;;;AAQvB,SAAS,gBAAgB,GAAI;AAChC,QAAI,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;AACnD,WAAO,aAAa,CAAC;CACxB;;;;;;;;;AAQM,SAAS,UAAU,CAAE,IAAI,EAAE;AAC9B,QAAI,aAAa,GAAG,SAAc,gBAAgB,EAAE,EAAE,EAAC,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;AAC9D,WAAO,aAAa,CAAC,IAAI,EAAE,CAAC;CAC/B","file":"apiRequest.js","sourcesContent":["import _ from 'lodash';\nimport Promise from 'bluebird';\nimport request from 'request';\nimport teamwork from './teamwork';\n\nconst apiRequestProto = {\n\n    get hostname () {\n        return teamwork.config.domain + '.teamwork.com';\n    },\n\n    get baseUrl () {\n        return 'https://' + this.hostname;\n    },\n\n    get config () {\n        return Object.assign({\n            encoding: 'utf8',\n            followRedirect: true,\n            headers: {\n                'Accept': 'application/json',\n                'Authorization': 'Basic ' + new Buffer(teamwork.config.apiKey + ':').toString('base64')\n            },\n            hostname: this.hostname,\n            baseUrl: this.baseUrl\n        }, this.opts);\n    },\n\n    exec () {\n        return new Promise(this.doRequest.bind(this));\n    },\n\n    doRequest (resolve, reject) {\n        let requestConfig = this.config;\n\n        // append json extension\n        requestConfig.uri = requestConfig.uri + '.json';\n\n        request(requestConfig, (error, response, json) => {\n            let paging = undefined;\n\n            if (error) {\n                reject(error);\n            } else if (response.statusCode >= 200 && response.statusCode < 300) {\n                if (typeof json === 'string') {\n                    json = JSON.parse(json);\n                }\n                \n                _.forEach(['x-page', 'x-pages', 'x-records'], function(n) {\n\n                    if (typeof response.headers[n] !== 'undefined') {\n                        if (typeof paging === 'undefined') paging = {};\n\n                        paging[n.slice(2)] = response.headers[n];\n                    }\n                })\n                \n                resolve({json, paging});\n            } else {\n                reject({\n                    code: response.statusCode,\n                    message: response.statusMessage\n                });\n            }\n        });\n    }\n};\n\nexport default apiRequestProto;\n\n/**\n * Factory function for API request objects\n *\n * @param  {Object}   opts Request options\n * @return {Promise}\n */\nexport function createApiRequest () {\n    let requestObject = Object.create(apiRequestProto);\n    return requestObject;\n}\n\n/**\n * Function for API requests\n *\n * @param  {Object}   opts Request options\n * @return {Promise}\n */\nexport function apiRequest (opts) {\n    let requestObject = Object.assign(createApiRequest(), {opts});\n    return requestObject.exec();\n}\n"]}